function git_branch_name {
  val=`git branch 2>/dev/null | grep '^*' | colrm 1 2`
  echo "$val"
}

function g {
  if [[ $# > 0 ]]; then
    git $@
  else
    git status
  fi
}
#compdef g=git

function rrg {
  rake routes | grep $1
}

function take {
  mkdir $1
  cd $1
}

function gc {
  git commit -m "$*"
}

function clear_desktop() {
  if find "$HOME/Desktop" -maxdepth 1 -type f | grep -v '/\.' &>/dev/null
  then
    DATE=$(date | tr " " "_")
    FILENAME="desktop_backup_$DATE"
    TMP="$HOME/Desktop/tmp_$DATE"
    NEW_PATH="$HOME/Documents/$FILENAME"

    # Move desktop files that are not hidden into a tmp folder
    mkdir $TMP
    find "$HOME/Desktop" -not -path "$HOME/Desktop/.*" -maxdepth 1 -type f -exec mv {} $TMP \;

    # move tmp folder to documents and rename it
    mv $TMP $NEW_PATH
    echo "Desktop files were moved to: $NEW_PATH"
  fi
}

# A command to launch a new, anonymous Chrome session for testing.
function chrome() {
  mkdir -p /tmp/chrome$1
  ~/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --user-data-dir=/tmp/chrome$1
}

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

function gbin {
  echo branch \($1\) has these commits and \($(parse_git_branch)\) does not
  git log ..$1 --no-merges --format='%h | Author:%an | Date:%ad | %s' --date=local
}

function gbout {
  echo branch \($(parse_git_branch)\) has these commits and \($1\) does not
  git log $1.. --no-merges --format='%h | Author:%an | Date:%ad | %s' --date=local
}

function box(){
  t="$1xxxx";c=${2:-=};
  echo ${t//?/$c};
  echo "$c $1 $c";
  echo ${t//?/$c};
}

#function gjc {
#    echo
#    echo "==============================================================================="
#    echo "Your Commit Message: $(g rev-parse --abbrev-ref HEAD) - $1"
#    echo "==============================================================================="
#    echo
#    g commit -m "$(g rev-parse --abbrev-ref HEAD) - $1"
#    g commit --amend
#}
#

function st {
  echo -ne "\e]1;$1\a"
}

function paver {
  while true
  do
    for i in 02E{{9..5},{6..8}}
    do
      printf "\u${i}O=o>"
      sleep 0.09
      printf "\b\b\b\b\b"
    done
    printf "_"
  done
}

function french {
  t=$(($(tput cols)/3))
  for FR in $(seq $(tput lines))
  do
    printf "\e[44m%${t}s\e[47m%${t}s\e[41m%${t}s\e[0m\n"
  done
}
